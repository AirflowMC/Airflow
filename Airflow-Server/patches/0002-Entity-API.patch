From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: GliczDev <67753196+GliczDev@users.noreply.github.com>
Date: Mon, 26 Aug 2024 15:13:50 +0200
Subject: [PATCH] Entity API


diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index acf97ca628577ce260a369179fb04b6c38955df0..0264a23c0d6b6bc4443e1312d55c4dfb77ffb018 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -308,6 +308,18 @@ public class ServerPlayer extends Player {
         this.object = null;
     }
 
+    // Airflow start - Entity API
+    @Override
+    protected me.glicz.airflow.entity.living.AirPlayer createAirEntity() {
+        return new me.glicz.airflow.entity.living.AirPlayer(this);
+    }
+
+    @Override
+    public me.glicz.airflow.entity.living.AirPlayer getAirEntity() {
+        return (me.glicz.airflow.entity.living.AirPlayer) super.getAirEntity();
+    }
+    // Airflow end - Entity API
+
     @Override
     public BlockPos adjustSpawnLocation(ServerLevel level, BlockPos pos) {
         AABB aabb = this.getDimensions(Pose.STANDING).makeBoundingBox(Vec3.ZERO);
@@ -1781,7 +1793,7 @@ public class ServerPlayer extends Player {
 
     @Nullable
     public Component getTabListDisplayName() {
-        return null;
+        return super.getTabListDisplayName(); // Airflow - Entity API
     }
 
     public int getTabListOrder() {
diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index c3b90e54978ed144829b135ae639d27a639aa586..ba4e48540f7d16517d7de74909743684c62b82fc 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -246,6 +246,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     @Nullable
     private BlockState inBlockState = null;
     private final Map<BlockPos, BlockState> blocksInside = new HashMap<>();
+    private final me.glicz.airflow.entity.AirEntity airEntity; // Airflow - Entity API
 
     public Entity(EntityType<?> entityType, Level level) {
         this.type = entityType;
@@ -267,8 +268,19 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         this.entityData = builder.build();
         this.setPos(0.0, 0.0, 0.0);
         this.eyeHeight = this.dimensions.eyeHeight();
+        this.airEntity = createAirEntity(); // Airflow - Entity API
     }
 
+    // Airflow start - Entity API
+    protected me.glicz.airflow.entity.AirEntity createAirEntity() {
+        return new me.glicz.airflow.entity.AirEntity(this);
+    }
+
+    public me.glicz.airflow.entity.AirEntity getAirEntity() {
+        return this.airEntity;
+    }
+    // Airflow end - Entity API
+
     public boolean isColliding(BlockPos pos, BlockState state) {
         VoxelShape collisionShape = state.getCollisionShape(this.level(), pos, CollisionContext.of(this));
         VoxelShape voxelShape = collisionShape.move(pos.getX(), pos.getY(), pos.getZ());
diff --git a/net/minecraft/world/entity/EntityType.java b/net/minecraft/world/entity/EntityType.java
index 418ce2cd8e86f5b24f6fcc32a21d1d7ba48153ac..9e520bc21807669188b5c6b55ba211283d2cd970 100644
--- a/net/minecraft/world/entity/EntityType.java
+++ b/net/minecraft/world/entity/EntityType.java
@@ -905,6 +905,7 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
     private final EntityDimensions dimensions;
     private final float spawnDimensionsScale;
     private final FeatureFlagSet requiredFeatures;
+    public final me.glicz.airflow.entity.AirEntityType<?> airEntityType = new me.glicz.airflow.entity.AirEntityType<>(this); // Airflow - Entity API
 
     private static <T extends Entity> EntityType<T> register(ResourceKey<EntityType<?>> resourceKey, EntityType.Builder<T> builder) {
         return Registry.register(BuiltInRegistries.ENTITY_TYPE, resourceKey, builder.build(resourceKey));
diff --git a/net/minecraft/world/entity/LivingEntity.java b/net/minecraft/world/entity/LivingEntity.java
index 343facf935a60707960a3b37aff019086ac661a6..b8470a74694696dcb5604aaad730bbf65015d39a 100644
--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -274,6 +274,18 @@ public abstract class LivingEntity extends Entity implements Attackable {
         this.brain = this.makeBrain(new Dynamic<>(nbtOps, nbtOps.createMap(ImmutableMap.of(nbtOps.createString("memories"), nbtOps.emptyMap()))));
     }
 
+    // Airflow start - Entity API
+    @Override
+    protected me.glicz.airflow.entity.living.AirLivingEntity createAirEntity() {
+        return new me.glicz.airflow.entity.living.AirLivingEntity(this);
+    }
+
+    @Override
+    public me.glicz.airflow.entity.living.AirLivingEntity getAirEntity() {
+        return (me.glicz.airflow.entity.living.AirLivingEntity) super.getAirEntity();
+    }
+    // Airflow end - Entity API
+
     public Brain<?> getBrain() {
         return this.brain;
     }
diff --git a/net/minecraft/world/entity/Mob.java b/net/minecraft/world/entity/Mob.java
index 60e649bbdab48dc10473adcd936c67bcc5b766b1..ea58abc2706360f9602765b91b946c86982d0d55 100644
--- a/net/minecraft/world/entity/Mob.java
+++ b/net/minecraft/world/entity/Mob.java
@@ -155,6 +155,18 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
         }
     }
 
+    // Airflow start - Entity API
+    @Override
+    protected me.glicz.airflow.entity.living.AirMob createAirEntity() {
+        return new me.glicz.airflow.entity.living.AirMob(this);
+    }
+
+    @Override
+    public me.glicz.airflow.entity.living.AirMob getAirEntity() {
+        return (me.glicz.airflow.entity.living.AirMob) super.getAirEntity();
+    }
+    // Airflow end - Entity API
+
     protected void registerGoals() {
     }
 
diff --git a/net/minecraft/world/entity/player/Player.java b/net/minecraft/world/entity/player/Player.java
index 2f39c3d153018baf349b30ec6b0883f1bdd1e476..56522aa42fd777165b5d852496085c98e135b069 100644
--- a/net/minecraft/world/entity/player/Player.java
+++ b/net/minecraft/world/entity/player/Player.java
@@ -204,6 +204,22 @@ public abstract class Player extends LivingEntity {
         this.rotOffs = 180.0F;
     }
 
+    // Airflow start - Entity API
+    @Override
+    protected me.glicz.airflow.entity.living.AirHumanoid createAirEntity() {
+        return null;
+    }
+
+    @Override
+    public me.glicz.airflow.entity.living.AirHumanoid getAirEntity() {
+        return (me.glicz.airflow.entity.living.AirHumanoid) super.getAirEntity();
+    }
+
+    public Component getTabListDisplayName() {
+        return getAirEntity().componentSerializer().serializeOrNull(getAirEntity().getPlayerListName());
+    }
+    // Airflow end - Entity API
+
     public boolean blockActionRestricted(Level level, BlockPos pos, GameType gameMode) {
         if (!gameMode.isBlockPlacingRestricted()) {
             return false;
